{"ast":null,"code":"import axios from 'axios';\nimport CommentsADD from '../comments/CommentsADD.vue';\nimport CommentView from '../comments/CommentView.vue';\nexport default {\n  name: 'PostComponent',\n  data() {\n    return {\n      posts: [],\n      isAuthenticated: false,\n      currentUserId: null // Store the current user's ID\n    };\n  },\n\n  components: {\n    \"comment-add\": CommentsADD,\n    \"comments-all\": CommentView\n  },\n  mounted() {\n    this.checkAuthentication();\n    this.fetchPosts();\n  },\n  methods: {\n    checkAuthentication() {\n      // Check if the user is authenticated\n      const token = localStorage.getItem('token');\n      this.isAuthenticated = !!token;\n      if (this.isAuthenticated) {\n        // Get the current user's ID from the token or another source\n        // For example, decode the token to get the user ID\n        // This is just a placeholder; adapt as needed\n        this.currentUserId = this.decodeToken(token).userId;\n      }\n    },\n    decodeToken(token) {\n      // Decode the token to extract user information (implement as needed)\n      // This is a placeholder function\n      // Example: const decodedToken = jwt.decode(token);\n      // return decodedToken;\n      return {\n        userId: 1\n      }; // Replace with actual decoding logic\n    },\n\n    async fetchPosts() {\n      if (this.isAuthenticated) {\n        try {\n          const response = await axios.get('http://localhost:3000/posts');\n          this.posts = response.data;\n        } catch (error) {\n          console.error('Error fetching posts:', error);\n        }\n      }\n    },\n    async deletePost(postId) {\n      if (this.isAuthenticated) {\n        try {\n          await axios.delete(`http://localhost:3000/posts/${postId}`);\n          this.posts = this.posts.filter(post => post.id !== postId);\n        } catch (error) {\n          console.error('Error deleting post:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","CommentsADD","CommentView","name","data","posts","isAuthenticated","currentUserId","components","mounted","checkAuthentication","fetchPosts","methods","token","localStorage","getItem","decodeToken","userId","response","get","error","console","deletePost","postId","delete","filter","post","id"],"sources":["C:\\Users\\Master\\OneDrive\\Documents\\VueJs\\Blogemaster\\src\\views\\posts\\PostsView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"isAuthenticated\" class=\"bg-white min-h-screen\">\r\n      <!-- text - start -->\r\n      <div class=\"relative\">\r\n        <!-- Gradient Overlay -->\r\n        <div class=\"absolute inset-0 bg-gradient-to-t from-black to-transparent opacity-50\"></div>\r\n        \r\n        <!-- Image -->\r\n        <img\r\n          src=\"https://www.shutterstock.com/image-photo/bloggingblog-concepts-ideas-white-worktable-260nw-1029506242.jpg\"\r\n          alt=\"Posts List\"\r\n          class=\"w-full h-48 object-cover\"\r\n        />\r\n        \r\n        <!-- Title -->\r\n        <h2 class=\"absolute top-0 left-0 w-full text-white text-3xl font-bold text-center pt-4 pb-2 bg-gradient-to-b from-transparent to-black opacity-75\">\r\n          Posts List\r\n        </h2>\r\n      </div>\r\n      <!-- text - end -->\r\n\r\n      <div class=\"flex justify-end mb-8 mt-6 mr-6\">\r\n        <router-link to=\"/create\">\r\n          <button class=\"px-4 py-2 bg-green-500 text-white rounded\">+ Create New Post</button>\r\n        </router-link>\r\n      </div>\r\n\r\n      <div class=\"grid gap-8 sm:grid-cols-2 sm:gap-12 lg:grid-cols-2 xl:grid-cols-2 xl:gap-16 ml-9\">\r\n        <div v-for=\"post in posts\" :key=\"post.id\" class=\"flex flex-col items-center gap-4 md:flex-row lg:gap-6\">\r\n          <div class=\"group relative block h-56 w-full shrink-0 self-start overflow-hidden rounded-lg bg-gray-100 shadow-lg md:h-24 md:w-24 lg:h-40 lg:w-40\">\r\n            <img\r\n              :src=\"post.image\"\r\n              loading=\"lazy\"\r\n              alt=\"Post Image\"\r\n              class=\"absolute inset-0 h-full w-full object-cover object-center transition duration-200 group-hover:scale-110\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"flex flex-col gap-2\">\r\n            <span class=\"text-sm text-gray-400\">July 19, 2021</span>\r\n\r\n            <h2 class=\"text-xl font-bold text-gray-800\">\r\n              <router-link :to=\"{ name: 'EditPost', params: { id: post.id } }\">\r\n                {{ post.title }}\r\n              </router-link>\r\n            </h2>\r\n\r\n            <p class=\"text-gray-500\">{{ post.body }}</p>\r\n\r\n            <div class=\"flex gap-2\">\r\n              <!-- Conditionally render edit and delete buttons -->\r\n              <template v-if=\"post.userId === currentUserId\">\r\n                <router-link :to=\"{ name: 'EditPost', params: { id: post.id } }\">\r\n                  <button class=\"px-4 py-2 text-green-500 rounded\">\r\n                    <!-- SVG icon for edit -->\r\n                  </button>\r\n                </router-link>\r\n                <button @click=\"deletePost(post.id)\" class=\"py-2 text-red-600 rounded\">\r\n                  <!-- SVG icon for delete -->\r\n                </button>\r\n              </template>\r\n            </div>\r\n\r\n            <!-- Pass the post ID as a prop to AddComment and CommentsALL components -->\r\n            <comment-add :post-id=\"post.id\" />\r\n            <comments-all :post-id=\"post.id\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"text-center mt-10\">\r\n      <p>Please log in to view posts.</p>\r\n      <router-link to=\"/login\">\r\n        <button class=\"px-4 py-2 bg-blue-500 text-white rounded\">Login</button>\r\n      </router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport CommentsADD from '../comments/CommentsADD.vue';\r\nimport CommentView from '../comments/CommentView.vue';\r\n\r\nexport default {\r\n  name: 'PostComponent',\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      isAuthenticated: false,\r\n      currentUserId: null // Store the current user's ID\r\n    };\r\n  },\r\n  components: {\r\n    \"comment-add\": CommentsADD,\r\n    \"comments-all\": CommentView\r\n  },\r\n  mounted() {\r\n    this.checkAuthentication();\r\n    this.fetchPosts();\r\n  },\r\n  methods: {\r\n    checkAuthentication() {\r\n      // Check if the user is authenticated\r\n      const token = localStorage.getItem('token');\r\n      this.isAuthenticated = !!token;\r\n      if (this.isAuthenticated) {\r\n        // Get the current user's ID from the token or another source\r\n        // For example, decode the token to get the user ID\r\n        // This is just a placeholder; adapt as needed\r\n        this.currentUserId = this.decodeToken(token).userId;\r\n      }\r\n    },\r\n    decodeToken(token) {\r\n      // Decode the token to extract user information (implement as needed)\r\n      // This is a placeholder function\r\n      // Example: const decodedToken = jwt.decode(token);\r\n      // return decodedToken;\r\n      return { userId: 1 }; // Replace with actual decoding logic\r\n    },\r\n    async fetchPosts() {\r\n      if (this.isAuthenticated) {\r\n        try {\r\n          const response = await axios.get('http://localhost:3000/posts');\r\n          this.posts = response.data;\r\n        } catch (error) {\r\n          console.error('Error fetching posts:', error);\r\n        }\r\n      }\r\n    },\r\n    async deletePost(postId) {\r\n      if (this.isAuthenticated) {\r\n        try {\r\n          await axios.delete(`http://localhost:3000/posts/${postId}`);\r\n          this.posts = this.posts.filter(post => post.id !== postId);\r\n        } catch (error) {\r\n          console.error('Error deleting post:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AAiFA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,WAAU,MAAO,6BAA6B;AACrD,OAAOC,WAAU,MAAO,6BAA6B;AAErD,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,KAAK;MACtBC,aAAa,EAAE,IAAG,CAAE;IACtB,CAAC;EACH,CAAC;;EACDC,UAAU,EAAE;IACV,aAAa,EAAEP,WAAW;IAC1B,cAAc,EAAEC;EAClB,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACPF,mBAAmBA,CAAA,EAAG;MACpB;MACA,MAAMG,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACT,eAAc,GAAI,CAAC,CAACO,KAAK;MAC9B,IAAI,IAAI,CAACP,eAAe,EAAE;QACxB;QACA;QACA;QACA,IAAI,CAACC,aAAY,GAAI,IAAI,CAACS,WAAW,CAACH,KAAK,CAAC,CAACI,MAAM;MACrD;IACF,CAAC;IACDD,WAAWA,CAACH,KAAK,EAAE;MACjB;MACA;MACA;MACA;MACA,OAAO;QAAEI,MAAM,EAAE;MAAE,CAAC,EAAE;IACxB,CAAC;;IACD,MAAMN,UAAUA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACL,eAAe,EAAE;QACxB,IAAI;UACF,MAAMY,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAC,6BAA6B,CAAC;UAC/D,IAAI,CAACd,KAAI,GAAIa,QAAQ,CAACd,IAAI;QAC5B,EAAE,OAAOgB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC;IACD,MAAME,UAAUA,CAACC,MAAM,EAAE;MACvB,IAAI,IAAI,CAACjB,eAAe,EAAE;QACxB,IAAI;UACF,MAAMN,KAAK,CAACwB,MAAM,CAAE,+BAA8BD,MAAO,EAAC,CAAC;UAC3D,IAAI,CAAClB,KAAI,GAAI,IAAI,CAACA,KAAK,CAACoB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,KAAMJ,MAAM,CAAC;QAC5D,EAAE,OAAOH,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}